/*                         personalstrategies                                   */ 

/*"use client";

import { useState, useEffect } from "react";
import axios from "axios";
import { IoMdAdd, IoIosStarOutline, IoMdStar } from "react-icons/io";
import { HiOutlineTrash } from "react-icons/hi";
import AddStrategyButton from "./add_strategy_button";
import { SiRobinhood } from "react-icons/si";
import useStrategyStore from "@/store/indicator/strategyStore";
import useCodePanelStore from "@/store/indicator/strategyCodePanelStore";
import { RiErrorWarningFill } from "react-icons/ri";

axios.defaults.withCredentials = true;

const PersonalStrategies = () => {
  const [strategyName, setStrategyName] = useState("");
  const [strategyCode, setStrategyCode] = useState("");
  const [editingStrategy, setEditingStrategy] = useState(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedStrategy, setSelectedStrategy] = useState(null);
  const { favorites, toggleFavorite, setPersonalStrategies, strategies } = useStrategyStore();
  const { openPanel, closePanelIfMatches } = useCodePanelStore(); // Yeni eklenen store hook'u

  const handleToggleFavorite = async (strategy) => {
      const isAlreadyFavorite = favorites.some((fav) => fav.id === strategy.id);
      toggleFavorite(strategy);

      try {
          if (isAlreadyFavorite) {
              await axios.delete(`${process.env.NEXT_PUBLIC_API_URL}/api/strategy-remove-favourite/`, {
                  data: { strategy_id: strategy.id }
              });                
          } else {
              await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/strategy-add-favorite/`, {
                  strategy_id: strategy.id
              });
          }
      } catch (error) {
          console.error("Favori işlemi sırasında hata oluştu:", error);
      }
  };

  const handleDeleteClick = (strategy) => {
    setSelectedStrategy(strategy);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    const { strategies, setPersonalStrategies } = useStrategyStore.getState();
  
    if (!selectedStrategy) return;
  
    try {
      // API'ye DELETE isteği gönder
      await axios.delete(`${process.env.NEXT_PUBLIC_API_URL}/api/delete-strategy/${selectedStrategy.id}/`, {
        withCredentials: true, // Cookie bilgisini dahil etmek için
      });
  
      // Eğer API başarılı olursa store'dan da kaldır
      setPersonalStrategies(strategies.filter((ind) => ind.id !== selectedStrategy.id));
      closePanelIfMatches(selectedStrategy.id)
      resetDeleteModal();
    } catch (error) {
      console.error("Silme işlemi sırasında hata oluştu:", error);
    }
  };

  const resetModal = () => {
    setStrategyName("");
    setStrategyCode("");
    setIsModalOpen(false);
  };

  const resetDeleteModal = () => {
    setShowDeleteModal(false);
    setSelectedStrategy(null);
  };

  return (
    <div className="text-white pt-2 flex flex-col items-center w-full">
      <div className="w-full max-h-[400px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-gray-900">
        {strategies.length === 0 ? (
          <></>
        ) : (
          strategies.map((strategy) => (
            <div key={strategy.id} className="bg-gray-900 hover:bg-gray-800 flex items-center justify-between w-full h-[40px] mb-2">
              <div className="flex items-center pl-2">
                <button className="bg-transparent p-2 rounded-md hover:bg-gray-800" onClick={() => handleToggleFavorite(strategy)}>
                  {favorites.some((fav) => fav.id === strategy.id) ? (
                    <IoMdStar className="text-lg text-yellow-500" />
                  ) : (
                    <IoIosStarOutline className="text-lg text-gray-600" />
                  )}
                </button>
                <span className="text-[15px]">{strategy.name}</span>

                <div className="group relative p-2 rounded-full">
                  <RiErrorWarningFill className="text-red-600"/>
                  <div
                    className="bg-[#cc4242] p-1 rounded-sm group-hover:flex hidden absolute top-1/2 -translate-y-1/2 -right-2 translate-x-full"
                  >
                    <span className="whitespace-nowrap text-sm">Derleme Hatası !</span>
                    <div
                      className="bg-inherit rotate-45 p-1 absolute top-1/2 -translate-y-1/2 left-0 -translate-x-1/2"
                    ></div>
                  </div>
                </div>


              </div>
              <div className="flex items-center gap-2">
                <AddStrategyButton strategyId={strategy.id} />
                <button className="bg-transparent p-2 rounded-md hover:bg-gray-800" onClick={() => {
                  setStrategyName(strategy.name);
                  setStrategyCode(strategy.code);
                  setEditingStrategy(strategy);
                  openPanel(strategy.name, strategy.code, strategy); // Paneli açıyoruz
                }}>
                  <SiRobinhood className="text-blue-400 hover:text-blue-700 text-lg cursor-pointer" />
                </button>
                <button
                    className="bg-transparent pr-4 pl-2 rounded-md hover:bg-gray-800"
                    onClick={() => handleDeleteClick(strategy)}
                >
                    <HiOutlineTrash className="text-red-700 hover:text-red-900 text-[19.5px] cursor-pointer"/>
                </button>

                {showDeleteModal && (
                  <div className="fixed inset-0 flex items-center justify-center bg-black/10">
                    <div className="bg-gray-900 text-white rounded-md w-[400px] p-6 shadow-lg relative">
                      <h2 className="text-lg font-bold mb-4">Silme Onayı</h2>
                      <p>{selectedStrategy?.name} stratejisini silmek istediğinize emin misiniz?</p>
                      <div className="flex justify-end mt-4 gap-2">
                        <button className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded" onClick={resetDeleteModal}>Hayır</button>
                        <button className="px-4 py-2 bg-red-500 hover:bg-red-600 rounded" onClick={confirmDelete}>Sil</button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))
        )}
      </div>

      <button className="mt-1 p-3 bg-green-500 hover:bg-green-600 text-white rounded-sm flex items-center justify-center h-3 w-16" onClick={() => {
        setEditingStrategy(null);
        setStrategyName("");
        setStrategyCode("");
        openPanel(); // Paneli açıyoruz
      }}>
        <IoMdAdd className="text-lg" />
      </button>     



    </div>
  );
};

export default PersonalStrategies;

--------------------------------------------------------------------------------------------------------------------------*/







/*                                        run_button_str                            */

/*"use client";

import { useState, useCallback } from "react";
import useStrategyStore from "@/store/indicator/strategyStore";
import usePanelStore from "@/store/indicator/panelStore";
import useCryptoStore from "@/store/indicator/cryptoPinStore";
import useStrategyDataStore from "@/store/indicator/strategyDataStore";
import axios from "axios";

import { TbTriangleFilled } from "react-icons/tb";
import { AiOutlineLoading3Quarters } from "react-icons/ai";

axios.defaults.withCredentials = true;

const RunButton = ({ strategyId, onBeforeRun }) => {
    const { toggleStrategy } = useStrategyStore();
    const { addSyncedPanel, end } = usePanelStore();
    const { selectedCrypto, selectedPeriod } = useCryptoStore();
    const { insertOrReplaceLastSubStrategyData } = useStrategyDataStore();
    const [isLoading, setIsLoading] = useState(false);


    const fetchStrategyData = useCallback(async () => {
        try {
            if (!selectedCrypto?.binance_symbol || !selectedPeriod || !strategyId) {
                console.warn("Eksik veri ile API çağrısı engellendi.");
                return;
            }

            const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/run-strategy/`, {
                strategy_id: strategyId,
                binance_symbol: selectedCrypto.binance_symbol,
                interval: selectedPeriod,
                end: end,
            });

            console.log("== RESPONSE ==")
            console.log(response.data)

            const { strategy_result = [], strategy_name = [], strategy_graph = [], prints = [], inputs = [] } = response.data || {};
            insertOrReplaceLastSubStrategyData(strategyId, strategy_name, strategy_result, strategy_graph, prints, inputs);
            //addSyncedPanel(strategyId);
        } catch (error) {
            console.error("Strategy verisi çekilirken hata oluştu:", error);
        }
    }, [strategyId, selectedCrypto, selectedPeriod, end, insertOrReplaceLastSubStrategyData]);

    const handleClick = async () => {
        setIsLoading(true);
        
        if (onBeforeRun) {
          await onBeforeRun(); // ✅ önce kaydet
        }

        await fetchStrategyData();
        
        toggleStrategy(strategyId);
        
        setTimeout(() => {
            setIsLoading(false);
        }, 250); // hafif geçiş için süre verdik
    };

    return (
        <button
          className="absolute top-1 right-16 gap-1 px-[9px] py-[5px] mr-4 rounded font-medium transition-all"
          title="Çalıştır"
          onClick={handleClick}
        >
          {isLoading ? (
            <AiOutlineLoading3Quarters className="animate-spin text-yellow-400 text-[18px]" />
          ) : (
            <TbTriangleFilled className="text-[18px] text-[rgb(39,192,65)] hover:text-[#44ff54] transform rotate-90" />
          )}
        </button>
      );
    };

export default RunButton;
--------------------------------------------------------------------------------------------*/



/*                                           strategyDataStore                                                         */


/*import { create } from "zustand";
import axios from 'axios';
import useCryptoStore from "./cryptoPinStore";
import usePanelStore from "./panelStore";

const useStrategyDataStore = create((set, get) => ({
    strategyData: {}, // Her indikatörün verisini burada saklayacağız

    insertStrategyData: (strategyId, strategy_name, strategy_result, strategy_graph, prints, inputs = {}) => {
       const state = get();
        
       const existingStrategy = state.strategyData[strategyId];
       const existingSubItems = existingStrategy?.subItems || {};
       const newSubId = Object.keys(existingSubItems).length + 1;
     
       set({
        strategyData: {
           ...state.strategyData,
           [strategyId]: {
             name: strategy_name,
             subItems: {
               ...existingSubItems,
               [newSubId]: {
                 inputs,
                 strategy_result,
                 strategy_graph,
                 prints
               }
             }
           }
         }
       });
    },

    insertOrReplaceLastSubStrategyData: (strategyId, strategy_name, strategy_result, strategy_graph, prints, inputs = {}) => {
      const state = get();
      const currentData = state.strategyData[strategyId];
    
      if (!currentData) {
        // İlk kez ekleniyor
        set({
          strategyData: {
            ...state.strategyData,
            [strategyId]: {
              name: strategy_name,
              subItems: {
                1: { inputs, strategy_result, strategy_graph, prints },
              },
            },
          },
        });
      } else {
        const subItems = currentData.subItems || {};
        const existingSubIds = Object.keys(subItems).map(Number);
        const maxSubId = existingSubIds.length > 0 ? Math.max(...existingSubIds) : 1;
    
        set({
          strategyData: {
            ...state.strategyData,
            [strategyId]: {
              name: strategy_name,
              subItems: {
                ...subItems,
                [maxSubId]: {
                  inputs,
                  strategy_result,
                  strategy_graph,
                  prints,
                },
              },
            },
          },
        });
      }
    },

    removeSubStrategy: (strategyId, subId) => {
        const state = get();
        const existing = state.strategyData[strategyId];
        const subItems = existing?.subItems;
      
        if (!existing || !subItems?.[subId]) return;
      
        const newSubItems = { ...subItems };
        delete newSubItems[subId];
      
        const newStrategyData = { ...state.strategyData };
      
        if (Object.keys(newSubItems).length === 0) {
          // Tüm sub'lar silinmişse indikatörü de kaldır
          delete newStrategyData[strategyId];
        } else {
          newStrategyData[strategyId] = {
            ...existing,
            subItems: newSubItems,
          };
        }
      
        set({ strategyData: newStrategyData });
    }, 

    updateInputs: async (strategyId, subId, updatedInputs) => {
        const state = get();
      
        const currentInputs =
          state.strategyData?.[strategyId]?.subItems?.[subId]?.inputs?.inputs || [];
    
        
        const mergedInputs = currentInputs.map((input) => {
          const updatedValue = updatedInputs[input.name];
          return {
            ...input,
            default: updatedValue ?? input.default,
          };
        });
    
        const response = await get().runCalculation(strategyId, updatedInputs);
        const { strategy_result, strategy_graph, prints } = response;
      
        const existingSubItems = state.strategyData[strategyId].subItems;
      
        set({
            strategyData: {
                ...state.strategyData,
                [strategyId]: {
                    ...state.strategyData[strategyId],
                    subItems: {
                        ...existingSubItems,
                        [subId]: {
                            inputs: { inputs: mergedInputs }, // dizi olarak güncellendi
                            strategy_result,
                            strategy_graph,
                            prints,
                        },
                    },
                },
            },
        });
    },


    runCalculation: async (strategyId, inputs) => {
        try {
            const { selectedCrypto, selectedPeriod } = useCryptoStore.getState();
            const { end } = usePanelStore.getState();
            
            if (!selectedCrypto?.binance_symbol || !selectedPeriod) {
                console.warn("runCalculation için gerekli bilgiler eksik.");
                return { result: [], prints: [] };
            }
          
            const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/run-updated-strategy/`, {
                strategy_id: strategyId,
                inputs: inputs,
                binance_symbol: selectedCrypto.binance_symbol,
                interval: selectedPeriod,
                end: end,
            });

            console.log("== Strategy ==")
            console.log("== RESPONSE ==")
            console.log(response)
            
            return {
                strategy_result: response.data.strategy_result,
                strategy_graph: response.data.strategy_graph,
                prints: response.data.prints,
            };
        } catch (error) {
            console.error('Strategy hesaplama hatası:', error);
            return { strategy_result: [], strategy_graph: [], prints: [] };
        }
    },
        
}));

export default useStrategyDataStore;*/




